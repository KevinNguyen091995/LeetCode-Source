package leetcode;
import java.util.Arrays;

//Challenge is to merge 2 sorted arrays. Array 1 is already set to have enough space for the merge.
//FOUND at https://leetcode.com/problems/merge-sorted-array/

/*
 * You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
 * and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
 * Merge nums1 and nums2 into a single array sorted in non-decreasing order.
 * The final sorted array should not be returned by the function, but instead be stored inside the array nums1.
 *  To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
 * 
 * Example 1:
 * Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
 * Output: [1,2,2,3,5,6]
 * Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
 * The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
*/

public class MergeTwoArrays {
	
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int j = 0;
        
        for(int i = m; i < m+n; i++){
            nums1[i] = nums2[j++];
        }
        Arrays.sort(nums1);
        System.out.println(Arrays.toString(nums1));
    }
    
    public static void main(String[] args) {
    	MergeTwoArrays test = new MergeTwoArrays();
    	
    	test.merge(new int[] {1,2,3,0,0,0}, 3, new int[] {6,5,4}, 3);
    	test.merge(new int[] {1,2,3,0,0,0}, 3, new int[] {6,5,4}, 3);
    	test.merge(new int[] {7,4,5,0,0,0}, 3, new int[] {8,9,11}, 3);
    }
}
